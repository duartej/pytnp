#!/usr/bin/env python
"""
"""
import sys
if sys.version_info < (2,6):
	print """\033[1;31mError: you must use python 2.6 or greater.\033[1;m
Check you have init the CMSSW environment: 
	$ cd /whereeverItIs/CMSSW/CMSSW_X_Y_Z/src
	$ cmsenv"""
	sys.exit(-1)


#-----------------------------------------------------------------------------------------
#--  Some auxiliary functions
def printErrorAndExit( message, exitcode ):
	"""
	"""
	_lines = message.split('\n')
	mess = ''
	for l in _lines:
		mess += '\033[1;31meffPlot Error: '+l+'\033[1;m\n'
	print mess
	exit(exitcode)


def parseOption( Opt, errorCondition, howManyCond, errorMessage ):
	"""
	parseOption( 'stringToParse', 'operator', condition, 'message' ) --> [ 'opt1', 'opt2',... ]

	Parse the 'Opt' option, if "len(Opt.split(',') errorCondition condition" is
	fulfill then raise and error message
	"""
	optList = Opt.split(',')
	#-- Ignore all the empty string
	optList = filter( lambda i: i != '', optList )

	try:
		isTrue = eval( 'len(optList) '+errorCondition+str(howManyCond) )
	except SyntaxError:
		print ''  
		print """INTERNAL ERROR! Bad use of the 'parseOption' function\n"""
		exit(-1)

	if isTrue:
		parser.error( errorMessage )

	return optList


def LumiUnit( unit ):
	"""
	LumiUnit( unit ) --> 'latex unit'
	"""
	VALID_UNITS = [ 'mb', 'nb', 'pb', 'fb' ] 
	if not unit in VALID_UNITS:
		mess = "Not recognized '%s' as a valid unit of Luminosity.\n\t\t " \
				"Use some of this list '%s'" % ( unit, str(VALID_UNITS))
		parser.error( mess )
	
	return unit+'^{-1}'

def getidtuple( _f, config_file ):
	"""..function getidtuple( filename ) ->  id, latexname 
	"""
	from pytnp.libPytnp.getresname import getResName

	# resonance name and latex format name
	try:
		resNameTuple = getResName( _f, config=config_file )
	except TypeError:
		#-- The file name must be standard (if there aren't config file)
		message = """The file name '%s' introduced is not in a standard format:"""\
				""" Resonance_histo[MuFromTrk|Trigger]_....root\n"""\
				""" You can use the -c option to include your own resonance name"""\
				""" in order to avoid the above file name notation""" % _f
		printErrorAndExit( message, -1 )

	return resNameTuple


#-----------------------------------------------------------------------------------------


if __name__ == '__main__':
	"""
	"""
        from optparse import OptionParser

        parser = OptionParser()
	parser.set_defaults(counting=False,effName='efficiency')
        parser.add_option( '-i', '--input', action='store', dest='fileName', metavar='FILENAME1[,FILENAME2,...]', \
			help='Input root file name, comma separated, no espaces' )
        parser.add_option( '-c', '--config',  action='store', dest='config_file', metavar='FILE', help='Python configuration file' )
	parser.add_option( '-p', '--printContent', action='store_true', dest='printContent', help='Print the Tag and Probe'\
			' content of the root file(s) showing their encapsulate structure and then exit ' )
        parser.add_option( '--1d', action='store', dest='dim1Plots', metavar='VAR', help='1-dimensional plots of binned VAR.'\
			'If enter more than one input file then the 1-dim plots of variable \'VAR\' from different root files will be plotted'\
			' in the same canvas' )
        parser.add_option( '--2d', action='store', dest='dim2Plots', metavar='VARX,VARY', help='2-dim maps usign in the x-axis '\
			'\'VARX\' and \'VARY\' in the y-axis' )
	parser.add_option( '-d', '--diff', action='store', dest='resToComp', metavar='VARX,VARY', help='Difference efficiencies maps.' \
			'Taking the efficiency from first file, e_1, and from the second, e_2, compute the e_1-e_2 maps in VARX-VARY space' )
        #TO BE DEPRECATED
	#parser.add_option( '--counting', action='store_true', dest='counting', help='If active this flag, do the plots using the MC information (counting events)' )
	#
        parser.add_option( '--sys', action='store', dest='sys', metavar='TYPE', help='Do 1-dim or 2-dim (needs the --1d or --2d options) with data and'\
			'MC information in the same canvas. \'TYPE\' is method used you want to compare, \'cnt\' if counting or \'fit\' if fitted.')
	parser.add_option( '-m', '--maps', action='store', dest='maps', metavar='CATEGORY VAR_X,VAR_Y', nargs=2, help='Create root files with TH2F and RooDataSets, give the name of the muon category and the binned variables to use' )
        parser.add_option( '-t', '--tables', action='store_true', dest='tables', help='Create latex tables from an efficiency map root file' )
        parser.add_option( '-L', action='store', dest='Lumi', metavar='LUMI unit', nargs=2, help='Integrated Luminosity and unit' )
	parser.add_option( '-e', '--effName', action='store', dest='effName', help='Efficiency name as will found in the rootfile (CAVEAT: The same name'\
                ' for all RooDataSet in the rootfile is mandatory)' )
        parser.add_option( '-f', '--force', action='store', dest='onlythisvar', metavar='VAR1[,VAR2,...]', help='Force to store as binned variables only VAR1[,VAR2,...]' )

        ( opt, args ) = parser.parse_args()

	if not opt.fileName:
		Message="""Missed mandatory argument -i FILENAME"""
		parser.error( Message )
	
	donesomething = False

	#____________________________________________________________________________________________________
	#Variables to be considered
	if opt.onlythisvar:
		Message = """Error parsing the --force option. I parsed '%s'""" % opt.onlythisvar
		onlythesevars = parseOption( opt.onlythisvar, '<', 1, Message )
	else:
		onlythesevars = []
	#____________________________________________________________________________________________________
	#Config file-- 
	config_file = None
	if opt.config_file:
		Message = """This option needs a file. I parsed '%s'""" % opt.config_file
		config_file = parseOption( opt.config_file, "!=", 1, Message )[0]
	#____________________________________________________________________________________________________

	#____________________________________________________________________________________________________
	#Print printContent and exit
	if opt.printContent:
		from pytnp.libPytnp.pytnpclass import pytnp
		
		Message = """I need at least 1 input files comma separated without espaces. I parsed '%s'""" % opt.fileName
		allFiles = parseOption( opt.fileName, '<',1, Message )
                for _f in allFiles:
			resNameTuple = getidtuple( _f, opt.config_file )
                        tnp = pytnp( _f, effName = opt.effName, variables=onlythesevars, resonance=resNameTuple, configfile=opt.config_file )
                        print tnp
		exit(0)
	#____________________________________________________________________________________________________

	#____________________________________________________________________________________________________
	#Store luminosity if is provided
	Lumi = ''
	if opt.Lumi:
		Lumi = ' L_{int}='
		#Lumi = ' #int#mathbf{L}dt= '
		Lumi += str(opt.Lumi[0])+' '+LumiUnit( opt.Lumi[1] )
	#____________________________________________________________________________________________________

	#____________________________________________________________________________________________________
	# Doing 1-dimensional plots, if there are more than one input file, do the plots plotted on the 
	# same canvas.
	if opt.dim1Plots and not opt.sys:
		from pytnp.libPytnp.pytnpclass import pytnp
		from pytnp.steerplots.plotsCreation import superImposed

		donesomething = True
		
		#-- Only I want one variable
		Message = """I need only one variable. I parsed '%s'""" % opt.dim1Plots
		variableList = parseOption( opt.dim1Plots, '>', 1, Message )
		
		variable = variableList[0]
		
		#-- Cheking how many inputs files have
		Message = """I need at least 1 input files comma separated without espaces. I parsed '%s'""" % opt.fileName
		allFiles = parseOption( opt.fileName, '<', 1, Message )

		#-- Dictionary of pytnp instance for every resonance
		tnpDict = {}
		#-- Filling the dict, note if we have the same resonance name we're going to
		#-- lose a file	
		for aFile in allFiles:
			#--- Extract from the standard name file the resonance
			resNameTuple = getidtuple( aFile, opt.config_file )
			#-- Raise an error if the user don't define diferent resonances names
			if tnpDict.has_key(resNameTuple[0]):
				message = """There are root input files names which have the same resonance names:\n"""
				message += """\033[1;39m  '%s': '%s'\n\033[1;m"""  % ( tnpDict[resNameTuple[0]].__fileroot__.GetName(), resNameTuple[0] ) 
				message += """\033[1;39m  '%s': '%s'\n\033[1;m"""  % ( aFile, resNameTuple[0] ) 
				message += """Impose the resonance name using a configuration file, ( '-c' option, see --help for usage)""" 
				printErrorAndExit( message, -1 )

			tnpDict[resNameTuple[0]] = pytnp( aFile, resonance=resNameTuple, variables=onlythesevars, configfile=opt.config_file ) #dataset=whatPlots )

		_title =' CMS Preliminary,'+Lumi+' #sqrt{s}=7 TeV '
		
		#-- Plotting
		superImposed( tnpDict, variable, Lumi, title=_title )
	#____________________________________________________________________________________________________

	#____________________________________________________________________________________________________
	# 2-dimensional differences plots
	if opt.resToComp and not opt.sys:
		from pytnp.libPytnp.pytnpclass import pytnp
		from pytnp.steerplots.plotsCreation import diff2DMaps
		
		donesomething = True
		#--- 
		Message = """I need at least 2 input files comma separated without espaces. I parsed '%s'""" % opt.fileName
		allFiles = parseOption( opt.fileName, '<', 2, Message )
		#--- Only two variables
		Message = """I need 2 binned variables. I parsed '%s'""" % opt.resToComp
		binnedVar = parseOption( opt.resToComp, '!=', 2, Message )
		#-- Dictionary of pytnp instance for every resonance
		tnpDict = {} 
	
		resonanceList = []
		for aFile in allFiles:
			#--- Extract from the standard name file the resonance ---
			# resonance name and latex format name
			resNameTuple = getidtuple( aFile, opt.config_file )
			tnpDict[resNameTuple[0]] = pytnp( aFile,  effName=opt.effName, resonance=resNameTuple, variables=onlythesevars, configfile=opt.config_file ) #,dataset=whatPlots )
			resonanceList.append( resNameTuple[0] )
		#--- Check we have 2 pytnp (no keys overwritten)
		if len(tnpDict) != 2:
			message = "You have the same resonance name for the two files introduced: '%s'\n"\
					"Edit a configuration file changing that behaviour and then use '-c' option" % str(tnpDict.keys())
			printErrorAndExit( message, -1 )

		#-- Taking the first input file as reference resonance 
		refRes = resonanceList[0]
		otherRes = resonanceList[1]
		#--- Ready to run the plots assuming the same datanames in the files
		for dataname in tnpDict[refRes].iterkeys():
			diff2DMaps( (tnpDict[refRes], dataname), (tnpDict[otherRes], dataname), binnedVar[0], binnedVar[1], Lumi )
			#resonancediffmaps( tnpDict, refRes, binnedVar[0], binnedVar[1] , Lumi )
	#____________________________________________________________________________________________________
	
	#____________________________________________________________________________________________________
	# 2-dimensional maps
	if opt.dim2Plots or opt.maps:
		from pytnp.libPytnp.pytnpclass import pytnp
		donesomething = True
		
		category = None
		#-- Two variables
		Message = """I need two binned variables root file. I parsed '%s'""" % opt.dim2Plots
		try:
			varList = parseOption( opt.dim2Plots, '!=', 2, Message )
		except AttributeError:
			#-- the user  do not use --2d flag, so we need the two variables from the
			#-- maps option
			if opt.maps:
				Message = "I need one category to do the maps. I parsed '%s'" % opt.maps[0]
				categoryList = parseOption( opt.maps[0], '!=', 1, Message )
				category = categoryList[0]
				Message = """I need two binned variables root file. I parsed '%s'""" % opt.maps[1]
				varList = parseOption( opt.maps[1], '!=', 2, Message )
		#--- Only one file
		Message = """I need only one root file. I parsed '%s'""" % opt.fileName
		_file = parseOption( opt.fileName, '>', 1, Message )
		
		resNameTuple = getidtuple( _file[0], config_file )

		tnp = pytnp(_file[0], effName=opt.effName, variables=onlythesevars, configfile=config_file, resonance=resNameTuple )#, dataset=whatPlots)
		#-- Select the datasets we want to use
		if category:
			isfulfillCat = lambda dataname : tnp[dataname]['objectType'] == category
		else:
			isfulfillCat = lambda dummy: True
		toUseList = [ dataname for dataname in tnp.RooDataSet.iterkeys() if isfulfillCat( dataname ) ]
		#-- If it doesn't find any, must be an erroneous input  
		if len(toUseList) == 0:
			Message = """No RooDataSet in the root file '%s' has the category name '%s'\n""" % (tnp.__fileroot__.GetName(), category )
			Message += """Check the root file to see what categories are available.\n"""
			Message += """You can use: 'effPlots -i %s -p' and see the 'objectType' key""" % tnp.__fileroot__.GetName()
			printErrorAndExit( Message, -1 )
		#--- Plots 2-dim maps
		for name in toUseList:
			#-- Only one category, if any
			tnp.plotEffMap(name, varList[0], varList[1], Lumi )

		if opt.maps:
			#-- Write the root files with TH2F maps and RooDataSet
			if not category:
				category = opt.maps[0]
				varList = parseOption( opt.maps[1], '!=', 2, Message )
			#-- CHANGED: new requirements (Yu and Zhen asked)
			#tnp.write('effMaps_'+tnp.resonance+'_'+category+'.root' )
			effType = [ tnp[dataname]['effType'] for dataname in toUseList ][0] # FIXME: this patch
			tnp.write('effMaps_'+tnp.resonance+'_'+effType+'.root' )
		del tnp
	#____________________________________________________________________________________________________
	
	#____________________________________________________________________________________________________
	# Monte Carlo comparations
	if opt.sys:
		from pytnp.libPytnp.pytnpclass import pytnp
		from pytnp.steerplots.plotsCreation import mcimposed

		Message = "I need 'cnt' (counting) or 'fit' (fitted) as argument of '--sys'. I parsed: '%s'" % opt.sys
		_s = parseOption( opt.sys, '!=', 1, Message )
		systematic = _s[0]

		donesomething = True
		
		if opt.dim1Plots:
			#-- Only I want one variable
			Message = """I need only one variable. I parsed '%s'""" % opt.dim1Plots
			variableList = parseOption( opt.dim1Plots, '>', 1, Message )
			
			variable = variableList[0]
			#-- Cheking 1 input files have
			Message = """I need only 1 input file. I parsed '%s'""" % opt.fileName
			allFiles = parseOption( opt.fileName, '!=', 1, Message )
			
			#--- Extract from the standard name file the resonance --- FIXME: Maybe the pytnp directly??
			resNameTuple = getidtuple( allFiles[0], opt.config_file )
			tnp = pytnp( allFiles[0], resonance=resNameTuple, variables=onlythesevars, configfile=opt.config_file, effName=opt.effName ) #dataset=whatPlots )
			
			_title =' CMS Preliminary,'+Lumi+' #sqrt{s}=7 TeV '
			
			mcimposed( tnp, variable, Lumi, systematic,title=_title )

		elif opt.resToComp:
			from pytnp.steerplots.plotsCreation import diff2DMaps
			#-- Two variables
			Message = """I need two binned variables root file. I parsed '%s'""" % opt.dim2Plots
			varList = parseOption( opt.resToComp, '!=', 2, Message )
			#--- Only one file
			Message = """I need only one root file. I parsed '%s'""" % opt.fileName
			_fileList = parseOption( opt.fileName, '>', 1, Message )
			_file = _fileList[0]
			
			resNameTuple = getidtuple( _file, config_file )
			tnp = pytnp( _file, resonance=resNameTuple, variables=onlythesevars, configfile=opt.config_file, effName=opt.effName ) #dataset=whatPlots )
			
			#-- Asociating each data with its mc
			mcpartner = {}
			for dataname, tnpdict in tnp.iteritems():
				isnotMC = False
				mcpartner[dataname] = []
				#-- Find the names for mc partners
				try:
					dummy = tnpdict['refMC']
					isnotMC = True
				except KeyError:
					pass
				
				if isnotMC:
					try:
						mcpartner[dataname].append( tnpdict['refMC'][systematic+'_eff'] )
					except KeyError:
						Message = "No '%s' Monte Carlo dataset for '%s'. Skipping the plot..." % ( sys+'_eff', dataname )
						printWarning( mcimposed.__module__+'.'+mcimposed.__name__, Message )
			#-- Doing the plots
			for dataname, mcnameList in mcpartner.iteritems():
				for mcname in mcnameList:
					diff2DMaps( (tnp,dataname), (tnp,mcname), varList[0], varList[1], Lumi )

		else:
			Message = """The --sys option also needs the --1d or --diff option"""
			#-- Raise an error
			parseOption( '0', '==', 1, Message )
	#____________________________________________________________________________________________________

	#____________________________________________________________________________________________________
	if opt.tables:
		from ROOT import TFile
		from pytnp.libPytnp.tnputils import tableLatex
		donesomething = True

		Message = """I need only 1 input files. I parsed '%s'""" % opt.fileName
		allFiles = parseOption( opt.fileName, '>', 1, Message )
		
		f = TFile( allFiles[0] )
		dataList = [ f.Get(i.GetName()) for i in f.GetListOfKeys() if i.GetClassName() == 'RooDataSet' ]
		if len(dataList) == 0:
			print """\033[1;33mWarning: the file '%s' does not contain a efficiency map\033[1;m""" % allFiles[0] 
		for d in dataList:
			tableLatex(d, opt.effName)
	#____________________________________________________________________________________________________

	if not donesomething:
		Message = """\033[1;34mI didn't do anything. See usage:\033[1;m"""
		print Message
		parser.print_help()

	



